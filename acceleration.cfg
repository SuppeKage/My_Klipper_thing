# This line must be put in slicer start gcode to make sure Square_Corner_Velocity at 100% acceleration is reflecting the set value in [printer] section.
    # SET_VELOCITY_LIMIT ACCEL={default_acceleration} ACCEL_TO_DECEL={default_acceleration/2}
# This line in slicer start gcode ensures that the acceleration factor will be 1 when starting the print
    # M222 S100
# This is for the SCV macro to get the initial value of Square_Corner_Velocity, before the value changes
    # SCV

[respond] # Needed for errormessages

[gcode_macro SCV]
gcode:
  {% set scv_at_start =  printer.toolhead.square_corner_velocity %}
  SET_GCODE_VARIABLE MACRO=M204 VARIABLE=scv_at_start VALUE={scv_at_start}

[gcode_macro M204]
description: Rewrites the M204, to allow changeing the acceleration by a factor (percent) when using acceleration control for slicer ie. SuoerSlicer
rename_existing: M204.1
variable_accel_factor: 1.0            # Factor for acceleration, set by M222 S<value>
variable_accel_to_decel_factor: 0.5   #Factor for allel_to_decel. 0.5 * accel_factor as default (can be changed in M222 macro)
variable_accel_limit: 6000            # Acceleration limit, set to 6000 mm/s^2 by default, can be changes by using M222 ACCEL<value>
variable_accel_to_decel_limit: 3000   # Accel_to_decel limit, set to 3000 mm/s^2 by default, can be changes by using M222 DECEL<value>
variable_scv_at_start: 2
variable_scv_enable: 0
gcode:
  {% set vars = printer["gcode_macro M204"] %}
# This section handles the case where M222 S<value> is a non-zero, positive value, and sets the square_coner_velocity as a function 
# of current acceleration/max_accel( as set in printer section or if SET_VELOCITY_LIMIT command is sent from slicer)
    {% if vars.accel_factor != 0 %}
      {% if params.S is defined %}
        {% set S = params.S|float %}
        {% set accel = S * vars.accel_factor %}
        {% set accel_to_decel = S * vars.accel_to_decel_factor %}
        {% set accel_limit = vars.accel_limit %}
        {% set accel_to_decel_limit = vars.accel_to_decel_limit %}
# Check if acceleration is HIGHER than set limit, sets the acceleration at the limit if it's higher
          {% if accel > accel_limit %} 
            {% set accel_high = accel %}
            {% set accel = accel_limit %}
            RESPOND TYPE=error MSG="Requested acceleration too high ({accel_high} mm/s^2) . Acceleration set to limit ({accel_limit} mm/s^2)"
          {% endif %}
# Check if allec_to_decel is HIGHER than set limit, sets the acceleration at the limit if it's higher
          {% if accel_to_decel > accel_to_decel_limit %} 
            {% set accel_to_decel_high = accel_to_decel %}
            {% set accel_to_decel = accel_to_decel_limit %}
            RESPOND TYPE=error MSG="Requested accel to decel value too high ({accel_to_decel_high} mm/s^2) . Acceleration set to limit ({accel_to_decel_limit} mm/s^2)"
          {% endif %}
# Check if acceleration is LOWER than set limit, sets the acceleration at the limit if it's lower
          {% set accel_lower_limit = printer.toolhead.max_accel / printer.toolhead.square_corner_velocity * 0.1 %}  # Sets lower limit for acceleraion, to make sure Square_Coner_Velocity never goes under 0.1 mm/s        
          {% if accel < accel_lower_limit %} 
            {% set accel_low = accel %}
            {% set accel = accel_lower_limit %}
            RESPOND TYPE=error MSG="Requested acceleration too low ({accel_low} mm/s^2) . Acceleration set to limit ({accel_lower_limit} mm/s^2)"
          {% endif %}
# Sets Square_Coner_Velocity (SCV) as a function af current acceleration/max_acceleration.
# If max_accel in [printer] section is the same as the current acceleration, the SCV will be the same as set in [printer] section.
# If NOT the same, the SCV will be multiplied by a factor of current acceleration/max_acceleration ie. 
# If current acceleraion is 3000 and max_accel is 4000 (3000/4000 = 0.75 * SCV)

# If ENABLE_SCV is set to 1, it will change the value of SCV, if set to 0 (anything else than 1 reaqlly) it will use the value of {scv_at_start} from the SCV Macro
      {% if vars.scv_enable == 1 %}
        {% set scv = accel * printer.toolhead.square_corner_velocity / printer.toolhead.max_accel %}
      {% endif %}
      {% if vars.scv_enable != 1 %}
        {% set scv = printer.toolhead.square_corner_velocity %}
      {% endif %}
        SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel} SQUARE_CORNER_VELOCITY={scv}
    {% endif %}
# If M222 S<value> is zero. The M204 will work as usual (As far as i have seen) and SCV won't be affected and acceleraions 
# will remain as per gcode. (A reset of SCV will have to be made by clicking the little arrow)
  {% else %}
    {% set vars = printer["gcode_macro M204"] %}
      {% if params.S is defined %}
        {% set S = params.S|float %}
        {% set accel = S|float %}
        {% set accel_to_decel = S * 0.5|float %}
        SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel} SQUARE_CORNER_VELOCITY={scv_at_start}
      {% endif %}
    {% endif %}

[gcode_macro M222]
description: Sets factor for acceleration control and acceleration limits
gcode:
  {% if params.S is defined %}
    {% set S = params.S|default(100)|float * 0.01 %}
    {% set ACCEL = params.ACCEL|default(6000)|int %}
    {% set accel_limit = ACCEL %}
    {% set accel_factor = S %}
    {% set DECEL = params.DECEL|default(3000)|int %}
    {% set accel_to_decel_limit = DECEL %}
    {% set accel_to_decel_factor = S * 0.5 %}
    {% set ENABLE_SCV = params.ENABLE_SCV|default(0)|int %}
    {% set scv_enable = ENABLE_SCV %}
    SET_GCODE_VARIABLE MACRO=M204 VARIABLE=accel_factor VALUE={accel_factor}
    SET_GCODE_VARIABLE MACRO=M204 VARIABLE=accel_to_decel_factor VALUE={accel_to_decel_factor}
    SET_GCODE_VARIABLE MACRO=M204 VARIABLE=accel_limit VALUE={accel_limit}
    SET_GCODE_VARIABLE MACRO=M204 VARIABLE=accel_to_decel_limit VALUE={accel_to_decel_limit}
    SET_GCODE_VARIABLE MACRO=M204 VARIABLE=scv_enable VALUE={scv_enable}
  {% endif %}